// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  MANAGER
  DEVELOPER
  DESIGNER
  QA
  HR
  SALES
}

enum StatusUser {
  ACTIVATED
  PENDING
  BLOCKED
}

model User {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  email      String    @unique
  phone      String    @unique
  token      Token[]
  login      Login?    @relation
  employeeId String?   @unique
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  roleId     String?
  role       Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
  isActive   Boolean   @default(false)
  status     StatusUser? @default(PENDING)
}

model Token {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deviceId     String
  accessToken  String
  refreshToken String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Login {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String?  @unique
  email     String?  @unique
  phone     String?  @unique
  password  String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  position  Position
  users     User[]
}

model Role {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  permissions Permission[]
  users       User[]
}

model Permission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  entity    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
}
