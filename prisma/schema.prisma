// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  name       String
  email      String    @unique
  phone      String    @unique
  token      Token[]
  login      Login?    @relation
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  roleId     String?
  role       Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
  isActive   Boolean   @default(false)
  status     String?   @default("PENDING")

  orders    Order[]
  discounts Discount[] @relation("UserDiscount")

  @@index([id, name, email, phone, employeeId, roleId, isActive, status, createdAt, updatedAt])
}

model Token {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deviceId     String
  accessToken  String
  refreshToken String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([id, userId, deviceId, createdAt, updatedAt])
}

model Login {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  username  String?   @unique
  email     String?   @unique
  phone     String?   @unique
  password  String
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([username, email, phone, userId, createdAt, updatedAt])
}

model Employee {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  position  String
  users     User[]

  @@index([id, position, createdAt, updatedAt])
}

model Role {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?
  name        String       @unique
  permissions Permission[]
  users       User[]

  @@index([id, name, createdAt, updatedAt])
}

model Permission {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  name      String
  entity    String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String

  @@index([id, name, entity, roleId, createdAt, updatedAt])
}

model Category {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  name          String     @unique
  parentId      String?
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subCategories Category[] @relation("CategoryHierarchy")

  attributes Attribute[] @relation("CategoryAttributes")
  products   Product[]

  @@index([id, name, parentId, createdAt, updatedAt])
}

model Attribute {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  name      String    @unique
  dataType  String

  categories        Category[]         @relation("CategoryAttributes")
  productAttributes ProductAttribute[]

  @@index([id, name, dataType, createdAt, updatedAt])
}

model ProductAttribute {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  productId   String
  attributeId String
  value       String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@index([id, productId, attributeId, createdAt, updatedAt])
}

model Product {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  name        String
  slug        String    @unique
  description String?
  price       Float
  stock       Int       @default(0)
  categoryId  String
  brandId     String?

  category   Category           @relation(fields: [categoryId], references: [id])
  brand      Brand?             @relation(fields: [brandId], references: [id])
  images     ProductImage[]
  attributes ProductAttribute[]
  orderItems OrderItem[]
  discounts  Discount[]         @relation("ProductDiscount")

  @@index([id, slug, name, price, createdAt, updatedAt])
}

model ProductImage {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  url         String // Đường dẫn ảnh
  alt         String? // Alt text hỗ trợ SEO
  productId   String
  isThumbnail Boolean   @default(false) // Ảnh đại diện
  order       Int? // Thứ tự hiển thị
  type        String? // Loại ảnh (gallery, zoom, main,...)

  product Product @relation(fields: [productId], references: [id])

  @@index([productId, isThumbnail, order])
}

model Brand {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  name      String    @unique
  logoUrl   String?

  products Product[]

  @@index([id, name, createdAt, updatedAt])
}

model Discount {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  name           String
  discountAssign String    @default("ORDER")
  value          Float
  startDate      DateTime
  endDate        DateTime
  isPercentage   Boolean
  status         String    @default("INACTIVE")
  order          Order[]   @relation("OrderDiscount")
  product        Product[] @relation("ProductDiscount")
  user           User[]    @relation("UserDiscount")

  @@index([id, discountAssign, startDate, endDate, isPercentage, createdAt, updatedAt])
}

model Order {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  status     String    @default("PLACED")
  totalPrice Float
  userId     String

  user      User        @relation(fields: [userId], references: [id]) // Quan hệ với User
  items     OrderItem[]
  discounts Discount[]  @relation("OrderDiscount") // Các discount áp dụng cho đơn hàng

  @@index([id, status, totalPrice, userId, createdAt, updatedAt])
}

model OrderItem {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  orderId   String
  productId String
  quantity  Int
  price     Float
  discount  Float

  order   Order   @relation(fields: [orderId], references: [id]) // Quan hệ với Order
  product Product @relation(fields: [productId], references: [id]) // Quan hệ với Product

  @@index([id, productId, orderId, createdAt, updatedAt])
}
